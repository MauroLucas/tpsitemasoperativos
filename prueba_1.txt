#include <stdio.h>
#include <mpi.h>
#include <stdlib.h>
#include <time.h>

int main(int argc, char *argv[]) {
    int rank, size;
    MPI_Init(&argc, &argv);

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    srand(time(NULL) + rank); // Inicializa la semilla del generador de números aleatorios

    // Simulación de carga: cada proceso espera un tiempo aleatorio
    int load = rand() % 10 + 1; // Carga simulada entre 1 y 10 segundos
    printf("Soy el core nro. %d de %d, trabajando por %d segundos.\n", rank, size, load);
    sleep(load);

    // Recopilar los tiempos de carga en el proceso raíz
    int *all_loads = NULL;
    if (rank == 0) {
        all_loads = (int *)malloc(size * sizeof(int));
    }

    MPI_Gather(&load, 1, MPI_INT, all_loads, 1, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Resumen de cargas:\n");
        for (int i = 0; i < size; i++) {
            printf("Core %d: %d segundos\n", i, all_loads[i]);
        }
        free(all_loads);
    }

    MPI_Finalize();
    return 0;
}