#include <stdio.h>
#include <mpi.h>
#include <time.h>

int main(int argc, char *argv[])
{
    int rank, size;
    MPI_Init(&argc, &argv);

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Inicializa el reloj
    clock_t start, end;
    double cpu_time_used;

    // Cada nodo tiene dos procesos
    if (rank == 0) {
        printf("Soy el proceso 0 del nodo 1\n");
        // Realiza alguna tarea específica para el proceso 0 del nodo 1
        start = clock();
        // Ejemplo de tarea: calcular la suma de los primeros 1000 números naturales
        int suma = 0;
        for (int i = 1; i <= 1000; ++i) {
            suma += i;
        }
        end = clock();
        cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
        printf("Tiempo utilizado por el proceso 0 del nodo 1: %f segundos\n", cpu_time_used);
    } else if (rank == 1) {
        printf("Soy el proceso 1 del nodo 1\n");
        // Realiza alguna tarea específica para el proceso 1 del nodo 1
        start = clock();
        // Ejemplo de tarea: calcular la suma de los primeros 500 números naturales
        int suma = 0;
        for (int i = 1; i <= 500; ++i) {
            suma += i;
        }
        end = clock();
        cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
        printf("Tiempo utilizado por el proceso 1 del nodo 1: %f segundos\n", cpu_time_used);
    }

    // Verifica si las tareas se están distribuyendo uniformemente
    // Puedes agregar aquí código para realizar esta verificación

    MPI_Finalize();
    return 0;
}